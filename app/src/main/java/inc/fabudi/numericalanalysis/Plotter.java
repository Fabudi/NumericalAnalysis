package inc.fabudi.numericalanalysis;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.text.DecimalFormat;

import inc.fabudi.numericalanalysis.math.NumberPair;

public class Plotter extends View {

    private static final DecimalFormat df = new DecimalFormat("0.00");

    private static float offset = 100F, someAnotherOffset = 100F;

    private boolean na03 = false;


    public static float[][] coords4 = new float[][]{
            {0.0F, 7.6F},
            {0.1F, 7.506009231668684F},
            {0.2F, 7.413180866565198F},
            {0.30000000000000004F, 7.321500529008952F},
            {0.4F, 7.230954021106361F},
            {0.5F, 7.141527320552123F},
            {0.6000000000000001F, 7.053206578457678F},
            {0.7000000000000001F, 6.965978117206529F},
            {0.8F, 6.879828428336084F},
            {0.9F, 6.794744170445698F},
            {1.0F, 6.710712167130577F},
            {1.1F, 6.627719404941245F},
            {1.2000000000000002F, 6.545753031368244F},
            {1.3F, 6.464800352851752F},
            {1.4000000000000001F, 6.384848832815817F},
            {1.5F, 6.305886089726914F},
            {1.6F, 6.227899895176495F},
            {1.7000000000000002F, 6.150878171987261F},
            {1.8F, 6.0748089923428665F},
            {1.9000000000000001F, 5.999680575940722F},
            {2.0F, 5.925481288167678F},
            {2.1F, 5.8521996382982415F},
            {2.2F, 5.779824277715096F},
            {2.3000000000000003F, 5.7083439981516175F},
            {2.4000000000000004F, 5.637747729956127F},
            {2.5F, 5.568024540377612F},
            {2.6F, 5.4991636318726504F},
            {2.7F, 5.431154340433262F},
            {2.8000000000000003F, 5.3639861339354615F},
            {2.9000000000000004F, 5.297648610508208F},
            {3.0F, 5.232131496922551F},
            {3.1F, 5.167424647000679F},
            {3.2F, 5.103518040044656F},
            {3.3000000000000003F, 5.040401779284586F},
            {3.4000000000000004F, 4.978066090345969F},
            {3.5F, 4.91650131973601F},
            {3.6F, 4.855697933348653F},
            {3.7F, 4.795646514988096F},
            {3.8000000000000003F, 4.736337764910578F},
            {3.9000000000000004F, 4.677762498384188F},
            {4.0F, 4.619911644266484F},
            {4.1000000000000005F, 4.56277624359972F},
            {4.2F, 4.50634744822343F},
            {4.3F, 4.450616519404168F},
            {4.4F, 4.395574826482214F},
            {4.5F, 4.3412138455349965F},
            {4.6000000000000005F, 4.2875251580570515F},
            {4.7F, 4.234500449656312F},
            {4.800000000000001F, 4.182131508766508F},
            {4.9F, 4.130410225375511F},
            {5.0F, 4.079328589769384F},
            {5.1000000000000005F, 4.028878691291972F},
            {5.2F, 3.9790527171198415F},
            {5.300000000000001F, 3.9298429510523527F},
            {5.4F, 3.8812417723167196F},
            {5.5F, 3.8332416543878183F},
            {5.6000000000000005F, 3.7858351638226186F},
            {5.7F, 3.739014959109013F},
            {5.800000000000001F, 3.6927737895288892F},
            {5.9F, 3.6471044940352626F},
            {6.0F, 3.6020000001432924F},
            {6.1000000000000005F, 3.5574533228350202F},
            {6.2F, 3.513457563477644F},
            {6.300000000000001F, 3.470005908755178F},
            {6.4F, 3.427091629613322F},
            {6.5F, 3.3847080802173775F},
            {6.6000000000000005F, 3.3428486969230558F},
            {6.7F, 3.3015069972600117F},
            {6.800000000000001F, 3.2606765789279475F},
            {6.9F, 3.2203511188051364F},
            {7.0F, 3.180524371969201F},
            {7.1000000000000005F, 3.1411901707300087F},
            {7.2F, 3.1023424236745227F},
            {7.300000000000001F, 3.0639751147234695F},
            {7.4F, 3.026082302199668F},
            {7.5F, 2.9886581179078853F},
            {7.6000000000000005F, 2.9516967662260707F},
            {7.7F, 2.915192523207828F},
            {7.800000000000001F, 2.879139735695984F},
            {7.9F, 2.84353282044713F},
            {8.0F, 2.808366263266981F},
            {8.1F, 2.773634618156427F},
            {8.200000000000001F, 2.739332506468155F},
            {8.3F, 2.705454616073695F},
            {8.4F, 2.671995700540765F},
            {8.5F, 2.6389505783207916F},
            {8.6F, 2.6063141319464838F},
            {8.700000000000001F, 2.574081307239323F},
            {8.8F, 2.542247112526862F},
            {8.9F, 2.5108066178696946F},
            {9.0F, 2.4797549542979938F},
            {9.1F, 2.4490873130574866F},
            {9.200000000000001F, 2.4187989448647556F},
            {9.3F, 2.3888851591717537F},
            {9.4F, 2.359341323439408F},
            {9.5F, 2.3301628624202113F},
            {9.600000000000001F, 2.301345257449688F},
            {9.700000000000001F, 2.2728840457466184F},
            {9.8F, 2.244774819721919F},
            {9.9F, 2.21701322629607F}
    };
    public static float[][] coordsOriginal4 = new float[][]{
            {0.0F, 760.0F},
            {0.1F, 750.6009231668684F},
            {0.2F, 741.3180866565198F},
            {0.30000000000000004F, 732.1500529008952F},
            {0.4F, 723.0954021106361F},
            {0.5F, 714.1527320552123F},
            {0.6000000000000001F, 705.3206578457678F},
            {0.7000000000000001F, 696.5978117206529F},
            {0.8F, 687.9828428336084F},
            {0.9F, 679.4744170445698F},
            {1.0F, 671.0712167130577F},
            {1.1F, 662.7719404941245F},
            {1.2000000000000002F, 654.5753031368245F},
            {1.3F, 646.4800352851752F},
            {1.4000000000000001F, 638.4848832815817F},
            {1.5F, 630.5886089726914F},
            {1.6F, 622.7899895176495F},
            {1.7000000000000002F, 615.0878171987262F},
            {1.8F, 607.4808992342867F},
            {1.9000000000000001F, 599.9680575940722F},
            {2.0F, 592.5481288167678F},
            {2.1F, 585.2199638298241F},
            {2.2F, 577.9824277715096F},
            {2.3000000000000003F, 570.8343998151618F},
            {2.4000000000000004F, 563.7747729956127F},
            {2.5F, 556.8024540377612F},
            {2.6F, 549.916363187265F},
            {2.7F, 543.1154340433262F},
            {2.8000000000000003F, 536.3986133935462F},
            {2.9000000000000004F, 529.7648610508209F},
            {3.0F, 523.2131496922551F},
            {3.1F, 516.7424647000679F},
            {3.2F, 510.3518040044656F},
            {3.3000000000000003F, 504.04017792845866F},
            {3.4000000000000004F, 497.80660903459693F},
            {3.5F, 491.650131973601F},
            {3.6F, 485.56979333486527F},
            {3.7F, 479.56465149880967F},
            {3.8000000000000003F, 473.63377649105786F},
            {3.9000000000000004F, 467.7762498384188F},
            {4.0F, 461.9911644266484F},
            {4.1000000000000005F, 456.27762435997204F},
            {4.2F, 450.63474482234295F},
            {4.3F, 445.06165194041677F},
            {4.4F, 439.5574826482214F},
            {4.5F, 434.12138455349964F},
            {4.6000000000000005F, 428.7525158057051F},
            {4.7F, 423.45004496563115F},
            {4.800000000000001F, 418.21315087665084F},
            {4.9F, 413.0410225375511F},
            {5.0F, 407.9328589769384F},
            {5.1000000000000005F, 402.8878691291972F},
            {5.2F, 397.90527171198414F},
            {5.300000000000001F, 392.9842951052353F},
            {5.4F, 388.124177231672F},
            {5.5F, 383.32416543878185F},
            {5.6000000000000005F, 378.58351638226185F},
            {5.7F, 373.9014959109013F},
            {5.800000000000001F, 369.2773789528889F},
            {5.9F, 364.71044940352624F},
            {6.0F, 360.20000001432925F},
            {6.1000000000000005F, 355.745332283502F},
            {6.2F, 351.3457563477644F},
            {6.300000000000001F, 347.0005908755178F},
            {6.4F, 342.7091629613322F},
            {6.5F, 338.47080802173775F},
            {6.6000000000000005F, 334.28486969230556F},
            {6.7F, 330.15069972600116F},
            {6.800000000000001F, 326.0676578927947F},
            {6.9F, 322.0351118805136F},
            {7.0F, 318.0524371969201F},
            {7.1000000000000005F, 314.11901707300086F},
            {7.2F, 310.2342423674523F},
            {7.300000000000001F, 306.39751147234693F},
            {7.4F, 302.6082302199668F},
            {7.5F, 298.86581179078854F},
            {7.6000000000000005F, 295.1696766226071F},
            {7.7F, 291.5192523207828F},
            {7.800000000000001F, 287.9139735695984F},
            {7.9F, 284.353282044713F},
            {8.0F, 280.8366263266981F},
            {8.1F, 277.36346181564267F},
            {8.200000000000001F, 273.9332506468155F},
            {8.3F, 270.54546160736953F},
            {8.4F, 267.1995700540765F},
            {8.5F, 263.89505783207915F},
            {8.6F, 260.63141319464836F},
            {8.700000000000001F, 257.4081307239323F},
            {8.8F, 254.2247112526862F},
            {8.9F, 251.08066178696947F},
            {9.0F, 247.9754954297994F},
            {9.1F, 244.90873130574866F},
            {9.200000000000001F, 241.87989448647556F},
            {9.3F, 238.88851591717537F},
            {9.4F, 235.93413234394077F},
            {9.5F, 233.01628624202112F},
            {9.600000000000001F, 230.1345257449688F},
            {9.700000000000001F, 227.28840457466185F},
            {9.8F, 224.4774819721919F},
            {9.9F, 221.701322629607F}
    };
    static Path path = new Path();
    static Paint paint = new Paint();
    private NumberPair touchCoords;
    private int height, width;

    public Plotter(Context context) {
        super(context);
    }

    public Plotter(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public Plotter(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    public Plotter(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
    }

    @Override
    public boolean onTouchEvent(@NonNull MotionEvent event) {
        float x = event.getX();
        float y = event.getY();

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_MOVE:
            case MotionEvent.ACTION_CANCEL:
                touchCoords = new NumberPair(x, y);
                invalidate();
                break;
            case MotionEvent.ACTION_UP:
                touchCoords = null;
                invalidate();
                break;
        }
        return true;
    }

//    public void setCoords(float[][] coords) {
//        this.coords = coords;
//        coordsOriginal = new float[this.coords.length][2];
//        for (int i = 0; i < this.coords.length; i++) {
//            coordsOriginal[i][0] = this.coords[i][0];
//            coordsOriginal[i][1] = this.coords[i][1];
//        }
//        invalidate();
//    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.WHITE);
        paint.setStrokeWidth(10);
        preparePoints((getWidth() - 200F) / 2);
        float yMin = coords4[0][1], yMax = coords4[0][1], xMin = coords4[0][0], xMax = coords4[0][0];
        for (int i = 0; i < coords4.length; i++) {
            if (yMin > coords4[i][1]) {
                yMin = coords4[i][1];
            }
            if (xMin > coords4[i][0]) {
                xMin = coords4[i][0];
            }
            if (yMax < coords4[i][1]) {
                yMax = coords4[i][1];
            }
            if (xMax < coords4[i][0]) {
                xMax = coords4[i][0];
            }
        }
        float centerOffset = getWidth() / 2 - (coords4[coords4.length - 1][0] + coords4[0][0]) / 2;
        float centerOffsetY = getHeight() / 2;

        paint.setColor(Color.WHITE);
        if(!na03){
            // Y
            canvas.drawLine(centerOffset, centerOffsetY - yMax - offset + someAnotherOffset, centerOffset, (float) (centerOffsetY - yMin + 2*offset + someAnotherOffset), paint);
        }else{
            canvas.drawLine(centerOffset, centerOffsetY - yMax - offset, centerOffset, (float) (centerOffsetY - yMin + 2*offset), paint);
        }
        if(na03) {
            // X
            canvas.drawLine(centerOffset + coords4[0][0] - offset, centerOffsetY + 350, centerOffset + coords4[coords4.length - 1][0] + offset, centerOffsetY + 350F, paint);
        }else{
            canvas.drawLine(centerOffset + coords4[0][0] - offset, centerOffsetY + someAnotherOffset, centerOffset + coords4[coords4.length - 1][0] + offset, centerOffsetY + someAnotherOffset, paint);
        }
        path.reset();
        paint.setColor(getResources().getColor(R.color.accent));
        paint.setStrokeWidth(10);
        path.moveTo(centerOffset + coords4[0][0], centerOffsetY - coords4[0][1] + someAnotherOffset);
        for (int i = 0; i < coords4.length - 1; i++) {
            path.lineTo(centerOffset + coords4[i + 1][0], centerOffsetY - coords4[i + 1][1] + someAnotherOffset);
        }
        canvas.drawPath(path, paint);
        if (touchCoords != null) {
            paint.setColor(Color.RED);
            paint.setColor(Color.WHITE);
            double[] arr = new double[coords4.length];
            for (int i = 0; i < coords4.length; i++) {
                arr[i] = coords4[i][0];
            }
            int foundIndex = findClosest(arr, touchCoords.getA() - centerOffset);
            System.out.println(coords4[foundIndex][1]);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(getResources().getColor(R.color.accent));
            canvas.drawCircle(centerOffset + coords4[foundIndex][0], centerOffsetY - coords4[foundIndex][1] + someAnotherOffset, 30, paint);
            canvas.drawRoundRect(new RectF((float) (touchCoords.getA() - 200), (float) yMax + 2 * offset, (float) (touchCoords.getA() + 250), (float) (yMax + 2 * offset + 150)), 20, 20, paint);
            paint.setTextSize(60);
            paint.setColor(Color.WHITE);
            canvas.drawText("(" + df.format(coordsOriginal4[foundIndex][0]) + "; " + df.format(coordsOriginal4[foundIndex][1]) + ")", (float) (touchCoords.getA() - 150), (float) yMax + 2 * offset + 90, paint);
        }
    }

    public int getSHeight() {
        return height;
    }

    private static int findClosest(double arr[], double target) {
        int n = arr.length;

        // Corner cases
        if (target <= arr[0])
            return 0;
        if (target >= arr[n - 1])
            return n - 1;

        // Doing binary search
        int i = 0, j = n, mid = 0;
        while (i < j) {
            mid = (i + j) / 2;

            if (arr[mid] == target)
                return mid;

            /* If target is less than array element,
               then search in left */
            if (target < arr[mid]) {

                // If target is greater than previous
                // to mid, return closest of two
                if (mid > 0 && target > arr[mid - 1])
                    return getClosest(arr, mid - 1,
                            mid, target);

                /* Repeat for left half */
                j = mid;
            }

            // If target is greater than mid
            else {
                if (mid < n - 1 && target < arr[mid + 1])
                    return getClosest(arr, mid,
                            mid + 1, target);
                i = mid + 1; // update i
            }
        }

        // Only single element left after search
        return mid;
    }

    private static int getClosest(double[] arr, int val1, int val2, double target) {
        if (target - arr[val1] >= arr[val2] - target) {
            return val2;
        } else
            return val1;
    }

    private void preparePoints(float width) {
        while (coords4[coords4.length - 1][0] - coords4[0][0] < width) {
            for (int i = 0; i < coords4.length; i++) {
                coords4[i][0] *= 1.05;
                coords4[i][1] *= 1.05;
            }
        }
    }

    public void na03(float[][] coords) {
        coords4 = coords;
        coordsOriginal4 = new float[coords.length][2];
        for (int i = 0; i < coords.length; i++) {
            coordsOriginal4[i][0] = coords[i][0];
            coordsOriginal4[i][1] = coords[i][1];
        }
        na03 = true;
        invalidate();
    }

    public void na04() {
        coords4 = new float[][]{
                {0.0F, 7.6F},
                {0.1F, 7.506009231668684F},
                {0.2F, 7.413180866565198F},
                {0.30000000000000004F, 7.321500529008952F},
                {0.4F, 7.230954021106361F},
                {0.5F, 7.141527320552123F},
                {0.6000000000000001F, 7.053206578457678F},
                {0.7000000000000001F, 6.965978117206529F},
                {0.8F, 6.879828428336084F},
                {0.9F, 6.794744170445698F},
                {1.0F, 6.710712167130577F},
                {1.1F, 6.627719404941245F},
                {1.2000000000000002F, 6.545753031368244F},
                {1.3F, 6.464800352851752F},
                {1.4000000000000001F, 6.384848832815817F},
                {1.5F, 6.305886089726914F},
                {1.6F, 6.227899895176495F},
                {1.7000000000000002F, 6.150878171987261F},
                {1.8F, 6.0748089923428665F},
                {1.9000000000000001F, 5.999680575940722F},
                {2.0F, 5.925481288167678F},
                {2.1F, 5.8521996382982415F},
                {2.2F, 5.779824277715096F},
                {2.3000000000000003F, 5.7083439981516175F},
                {2.4000000000000004F, 5.637747729956127F},
                {2.5F, 5.568024540377612F},
                {2.6F, 5.4991636318726504F},
                {2.7F, 5.431154340433262F},
                {2.8000000000000003F, 5.3639861339354615F},
                {2.9000000000000004F, 5.297648610508208F},
                {3.0F, 5.232131496922551F},
                {3.1F, 5.167424647000679F},
                {3.2F, 5.103518040044656F},
                {3.3000000000000003F, 5.040401779284586F},
                {3.4000000000000004F, 4.978066090345969F},
                {3.5F, 4.91650131973601F},
                {3.6F, 4.855697933348653F},
                {3.7F, 4.795646514988096F},
                {3.8000000000000003F, 4.736337764910578F},
                {3.9000000000000004F, 4.677762498384188F},
                {4.0F, 4.619911644266484F},
                {4.1000000000000005F, 4.56277624359972F},
                {4.2F, 4.50634744822343F},
                {4.3F, 4.450616519404168F},
                {4.4F, 4.395574826482214F},
                {4.5F, 4.3412138455349965F},
                {4.6000000000000005F, 4.2875251580570515F},
                {4.7F, 4.234500449656312F},
                {4.800000000000001F, 4.182131508766508F},
                {4.9F, 4.130410225375511F},
                {5.0F, 4.079328589769384F},
                {5.1000000000000005F, 4.028878691291972F},
                {5.2F, 3.9790527171198415F},
                {5.300000000000001F, 3.9298429510523527F},
                {5.4F, 3.8812417723167196F},
                {5.5F, 3.8332416543878183F},
                {5.6000000000000005F, 3.7858351638226186F},
                {5.7F, 3.739014959109013F},
                {5.800000000000001F, 3.6927737895288892F},
                {5.9F, 3.6471044940352626F},
                {6.0F, 3.6020000001432924F},
                {6.1000000000000005F, 3.5574533228350202F},
                {6.2F, 3.513457563477644F},
                {6.300000000000001F, 3.470005908755178F},
                {6.4F, 3.427091629613322F},
                {6.5F, 3.3847080802173775F},
                {6.6000000000000005F, 3.3428486969230558F},
                {6.7F, 3.3015069972600117F},
                {6.800000000000001F, 3.2606765789279475F},
                {6.9F, 3.2203511188051364F},
                {7.0F, 3.180524371969201F},
                {7.1000000000000005F, 3.1411901707300087F},
                {7.2F, 3.1023424236745227F},
                {7.300000000000001F, 3.0639751147234695F},
                {7.4F, 3.026082302199668F},
                {7.5F, 2.9886581179078853F},
                {7.6000000000000005F, 2.9516967662260707F},
                {7.7F, 2.915192523207828F},
                {7.800000000000001F, 2.879139735695984F},
                {7.9F, 2.84353282044713F},
                {8.0F, 2.808366263266981F},
                {8.1F, 2.773634618156427F},
                {8.200000000000001F, 2.739332506468155F},
                {8.3F, 2.705454616073695F},
                {8.4F, 2.671995700540765F},
                {8.5F, 2.6389505783207916F},
                {8.6F, 2.6063141319464838F},
                {8.700000000000001F, 2.574081307239323F},
                {8.8F, 2.542247112526862F},
                {8.9F, 2.5108066178696946F},
                {9.0F, 2.4797549542979938F},
                {9.1F, 2.4490873130574866F},
                {9.200000000000001F, 2.4187989448647556F},
                {9.3F, 2.3888851591717537F},
                {9.4F, 2.359341323439408F},
                {9.5F, 2.3301628624202113F},
                {9.600000000000001F, 2.301345257449688F},
                {9.700000000000001F, 2.2728840457466184F},
                {9.8F, 2.244774819721919F},
                {9.9F, 2.21701322629607F}
        };
        coordsOriginal4 = new float[][]{
                {0.0F, 760.0F},
                {0.1F, 750.6009231668684F},
                {0.2F, 741.3180866565198F},
                {0.30000000000000004F, 732.1500529008952F},
                {0.4F, 723.0954021106361F},
                {0.5F, 714.1527320552123F},
                {0.6000000000000001F, 705.3206578457678F},
                {0.7000000000000001F, 696.5978117206529F},
                {0.8F, 687.9828428336084F},
                {0.9F, 679.4744170445698F},
                {1.0F, 671.0712167130577F},
                {1.1F, 662.7719404941245F},
                {1.2000000000000002F, 654.5753031368245F},
                {1.3F, 646.4800352851752F},
                {1.4000000000000001F, 638.4848832815817F},
                {1.5F, 630.5886089726914F},
                {1.6F, 622.7899895176495F},
                {1.7000000000000002F, 615.0878171987262F},
                {1.8F, 607.4808992342867F},
                {1.9000000000000001F, 599.9680575940722F},
                {2.0F, 592.5481288167678F},
                {2.1F, 585.2199638298241F},
                {2.2F, 577.9824277715096F},
                {2.3000000000000003F, 570.8343998151618F},
                {2.4000000000000004F, 563.7747729956127F},
                {2.5F, 556.8024540377612F},
                {2.6F, 549.916363187265F},
                {2.7F, 543.1154340433262F},
                {2.8000000000000003F, 536.3986133935462F},
                {2.9000000000000004F, 529.7648610508209F},
                {3.0F, 523.2131496922551F},
                {3.1F, 516.7424647000679F},
                {3.2F, 510.3518040044656F},
                {3.3000000000000003F, 504.04017792845866F},
                {3.4000000000000004F, 497.80660903459693F},
                {3.5F, 491.650131973601F},
                {3.6F, 485.56979333486527F},
                {3.7F, 479.56465149880967F},
                {3.8000000000000003F, 473.63377649105786F},
                {3.9000000000000004F, 467.7762498384188F},
                {4.0F, 461.9911644266484F},
                {4.1000000000000005F, 456.27762435997204F},
                {4.2F, 450.63474482234295F},
                {4.3F, 445.06165194041677F},
                {4.4F, 439.5574826482214F},
                {4.5F, 434.12138455349964F},
                {4.6000000000000005F, 428.7525158057051F},
                {4.7F, 423.45004496563115F},
                {4.800000000000001F, 418.21315087665084F},
                {4.9F, 413.0410225375511F},
                {5.0F, 407.9328589769384F},
                {5.1000000000000005F, 402.8878691291972F},
                {5.2F, 397.90527171198414F},
                {5.300000000000001F, 392.9842951052353F},
                {5.4F, 388.124177231672F},
                {5.5F, 383.32416543878185F},
                {5.6000000000000005F, 378.58351638226185F},
                {5.7F, 373.9014959109013F},
                {5.800000000000001F, 369.2773789528889F},
                {5.9F, 364.71044940352624F},
                {6.0F, 360.20000001432925F},
                {6.1000000000000005F, 355.745332283502F},
                {6.2F, 351.3457563477644F},
                {6.300000000000001F, 347.0005908755178F},
                {6.4F, 342.7091629613322F},
                {6.5F, 338.47080802173775F},
                {6.6000000000000005F, 334.28486969230556F},
                {6.7F, 330.15069972600116F},
                {6.800000000000001F, 326.0676578927947F},
                {6.9F, 322.0351118805136F},
                {7.0F, 318.0524371969201F},
                {7.1000000000000005F, 314.11901707300086F},
                {7.2F, 310.2342423674523F},
                {7.300000000000001F, 306.39751147234693F},
                {7.4F, 302.6082302199668F},
                {7.5F, 298.86581179078854F},
                {7.6000000000000005F, 295.1696766226071F},
                {7.7F, 291.5192523207828F},
                {7.800000000000001F, 287.9139735695984F},
                {7.9F, 284.353282044713F},
                {8.0F, 280.8366263266981F},
                {8.1F, 277.36346181564267F},
                {8.200000000000001F, 273.9332506468155F},
                {8.3F, 270.54546160736953F},
                {8.4F, 267.1995700540765F},
                {8.5F, 263.89505783207915F},
                {8.6F, 260.63141319464836F},
                {8.700000000000001F, 257.4081307239323F},
                {8.8F, 254.2247112526862F},
                {8.9F, 251.08066178696947F},
                {9.0F, 247.9754954297994F},
                {9.1F, 244.90873130574866F},
                {9.200000000000001F, 241.87989448647556F},
                {9.3F, 238.88851591717537F},
                {9.4F, 235.93413234394077F},
                {9.5F, 233.01628624202112F},
                {9.600000000000001F, 230.1345257449688F},
                {9.700000000000001F, 227.28840457466185F},
                {9.8F, 224.4774819721919F},
                {9.9F, 221.701322629607F}
        };
        na03 = false;
        invalidate();
    }
}